class InfoMessage():

    def __init__(self,training_type,duration,distance,speed,calories):
        
        self.training_type = training_type
        self.duration = duration
        self.distance = distance
        self.speed = speed
        self.calories = calories

    def get_message(self) -> str:
        return (f'Тип тренировки: {self.training_type}; '
                f'Длительность: {self.duration:.3f} ч.; '
                f'Дистанция: {self.distance:.3f} км; '
                f'Ср. скорость: {self.speed:.3f} км/ч; '
                f'Потрачено ккал: {self.calories:.3f}.')


class Training:
    LEN_STEP = 0.65
    M_IN_KM = 1000
    
    def __init__(self,action: int,duration: float,weight: float,) -> None:
        self.action = action
        self.duration = duration
        self.weight = weight

    def get_distance(self): #преодаленная дистанция в км
        dist = self.action * self.LEN_STEP / self.M_IN_KM
        return dist

    def get_mean_speed(self): #ср. скорость треинровки км.ч
        m_speed = self.get_distance() / self.duration
        return m_speed
        
    def get_spent_calories():
        pass

    def show_training_info(self):
        info_message = InfoMessage(self.__class__.__name__,
                                   self.duration,
                                   self.get_distance(),
                                   self.get_mean_speed(),
                                   self.get_spent_calories())
        return info_message

class Running(Training):
    CALORIES_MEAN_SPEED_MULTIPLIER = 18
    CALORIES_MEAN_SPEED_SHIFT = 1.79
            

    def get_spent_calories(self):
        calories = self.CALORIES_MEAN_SPEED_MULTIPLIER * super().get_mean_speed() / super().M_IN_KM * self.duration
        return calories

class SportsWalking(Training):
    COEF_CALOR1 = 0.035
    COEF_CALOR2 = 0.029
    KMH_in_MS = 0.278
    CM_IN_M = 10 ** 2
    H_IN_MIN = 60
    def get_spent_calories(self,height):
        self.height = height 

        calories = (self.COEF_CALOR1 * super().weight
                    + (((super().get_distance * self.KMH_in_MS) ** 2
                       / self.height / self.CM_IN_M)) * self.COEF_CALOR2
                    * super().weight) * super().duration * self.H_IN_MIN
        return calories



class Swimming(Training):
    LEN_STEP = 1.38
    CALORIES_WEIGHT_MULTIPLIER = 1.1
    CALORIES_MEAN_SPEED_SHIFT = 2

    def __init__(self,action,duration,weight,length_pool,count_pool):
        self.length_pool = length_pool
        self.count_pool = count_pool 
        super().__init__(action,duration,weight)

    def get_mean_speed(self):
        speed_in_pool = (self.length_pool * self.count_pool
                         / super().M_IN_KM / self.duration)
        return speed_in_pool

    def get_spent_calories(self):
        calor_in_pool = ((self.get_mean_speed() + self.CALORIES_WEIGHT_MULTIPLIER)
                         * self.CALORIES_MEAN_SPEED_SHIFT * self.duration)
        return calor_in_pool

def read_package(workout_type: str, data: list) -> Training:
    """Прочитать данные полученные от датчиков."""
    trening_type: dict[str, type[Training]] = {
        'SWM': Swimming,
        'RUN': Running,
        'WLK': SportsWalking
    }
    return trening_type[workout_type](*data)

def read_package(workout_type: str, data: list) -> Training:
    """Прочитать данные полученные от датчиков."""
     


def main(training: Training) -> None:
    """Главная функция."""
    print(training.show_training_info().get_message())


if __name__ == '__main__':
    packages = [
        ('SWM', [720, 1, 80, 25, 40]),
        ('RUN', [15000, 1, 75]),
        ('WLK', [9000, 1, 75, 180]),
    ]

    for workout_type, data in packages:
        training = read_package(workout_type, data)
        main(training)